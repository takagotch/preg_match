#
.

#
[..]
[^..]
&&
a-z
\w [a-zA-Z0-9_]
\W [^a-zA-Z0-9_]
\s [ \t\r\n\f]
\S [^ \t\r\n\f]
\d [0-9]
\D [^0-9]
\h [0-9a-fA-F]
\H [^0-9a-fA-F]
\p {property-name}
\P {^property-name}
[:alnum:] POSIX

#
\R
\X

#
*
+
?
{n}
{n,}
{,m}
{n,m}
*?
+?
??
{n,}?
{,m}?
{n,m}?
*+
++
?_

#
(pat)
\1,\2,
\k<1>,\k<2>
\k<-1>,\k<-2>
\k'-1',\k<-2>,
(?<name>pat) (?'name'pat)
\k<name>
\k'name'
(?:pat)
(?>pat)

#
\g<name>
\g'name'
\g<n>  (n >= 1)
\g'n'  (n >= 1)
\g<0>  (n >= 1)
\g<-n>  (n >= 1)
\g'-n'  (n >= 1)
\g<+n>  (n >= 1)
\g'+n'  (n >= 1)
\k<n+level>  (n >= 1)
\k<n-level>  (n >= 1)
\k'n+level'  (n >= 1)
\k'n-level'   (n >= 1)
\k'-n-level'   (n >= 1)
\k'-n+level'   (n >= 1)
\k<name+level>  (n >= 1)
\k<name-level>  (n >= 1)
\k'name+level'  (n >= 1)
\k'name-level'  (n >= 1)

#
pat1 | pat2

#
^
$
\A
\Z
\z
\b
\B
(?=pat)
(?!pat)
(<=pat)
(?<!pat)
\K

#
(?(cond)pat) 
(cond)truepat|falsepat)

#
(?on:pat)
(?on-off:pat)

#
(?#comment here)

#
$~
$&
$`
$'
$1
$+

#(?#commet here)
float_pat = /\A
  \d+    #1 
  (\.    #1.
    \d+  #1.1
  )?
\z/x
float_pat.match("3.14") #
#\s, \p{Space}
/x y/x.match("x y")
/x\ y/x.match("x y")


/*
/pat/u UTF-8
/pat/e EUC-JP
/pat/s Windows-31J
/pat/n ASCII-8bit
*/
#Regexp#encoding
#-*- coding:utf-8 -*-
/aiu/.encoding
/abc/.encoding
/abc/u.encoding
#Regexp#fixed_encoding?
#-*- coding:utf-8 -*-
/aiu/.fixed_encoding?
/abc/.fixed_encoding?
/abc/e.fixed_encoding?
/abc/ =~ "aiu"
/abc/e =~ "aiu"

/*
/pat/i
/pat/m .
/pat/x 
/pta/o #{}
*/
#(?on:pat), (?on-off:pat)
/a(?i:b)c/.match("aBc")
/a(?i:b)c/.match("abc")
#(?on), (?on-off)
/a(?i)bc/.match("aBc")
/a(?i)bc/.match("aBC")
#((?i))
/a(?:(?i)bc)d/.match("aBCd")
/a(?:(?i)bc)d/.match("aBCD")
#Regexp.new
Regexp.new("abc", Regexp::IGNORECASE)
Regexp.new("abc", Regexp::MULTILINE)
Regexp.new("abc", # Comment", Regexp::EXTENDED)
Regexp.new("abc", Regexp::IGNORECASE | Regexp::MULTILINE)







